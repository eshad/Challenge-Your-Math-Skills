{
  "version": 3,
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/.next-internal/server/app/api/generate-problem/route/actions.js"],"sourcesContent":["__turbopack_export_value__({\n});"],"names":[],"mappings":"AAAA,2BAA2B,CAC3B"}},
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/supabaseClient.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\nexport type Database = {\n  public: {\n    Tables: {\n      math_problem_sessions: {\n        Row: {\n          id: string\n          created_at: string\n          problem_text: string\n          final_answer: number\n        }\n        Insert: {\n          id?: string\n          created_at?: string\n          problem_text: string\n          final_answer: number\n        }\n        Update: {\n          id?: string\n          created_at?: string\n          problem_text?: string\n          final_answer?: number\n        }\n      }\n      math_problem_submissions: {\n        Row: {\n          id: string\n          session_id: string\n          user_answer: number\n          is_correct: boolean\n          feedback: string\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          session_id: string\n          user_answer: number\n          is_correct: boolean\n          feedback: string\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          session_id?: string\n          user_answer?: number\n          is_correct?: boolean\n          feedback?: string\n          created_at?: string\n        }\n      }\n    }\n  }\n}"],"names":[],"mappings":";;;;;;AAEA,MAAM;AACN,MAAM;AAEN;;;AAIO,MAAM,WAAW,wMAAa,aAAa"}},
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 27, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/generate-problem/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { GoogleGenerativeAI } from '@google/generative-ai'\nimport { supabase } from '@/lib/supabaseClient'\n\nconst genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY!)\n\nconst SYLLABUS_CONTEXT = `\nYou are generating math word problems for Primary 5 students in Singapore following the official syllabus.\n\nTopics include:\n- Whole Numbers (up to 10 million, four operations, order of operations)\n- Fractions (division as fractions, adding/subtracting mixed numbers, multiplying fractions)\n- Decimals (multiply/divide by 10, 100, 1000, measurement conversions)\n- Percentage (finding %, discount, GST, interest)\n- Rate (rate per unit)\n- Area & Volume (triangle, composite figures, cube/cuboid, volume of liquid)\n- Geometry (angles, properties of shapes)\n\nGenerate a creative word problem with a real-world context that Primary 5 students can relate to.\nThe problem should test one of the topics above.\nProvide ONLY a JSON response with this exact structure:\n{\n  \"problem_text\": \"the word problem text\",\n  \"final_answer\": numerical_answer_only\n}\n\nDo not include any markdown, explanation, or additional text. Only return valid JSON.\n`\n\nexport async function GET() {\n  try {\n    const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash' })\n\n    const result = await model.generateContent(SYLLABUS_CONTEXT)\n    const response = await result.response\n    const text = response.text()\n\n    let problemData\n    try {\n      const cleanedText = text.replace(/```json\\n?|\\n?```/g, '').trim()\n      problemData = JSON.parse(cleanedText)\n    } catch (parseError) {\n      console.error('Failed to parse AI response:', text)\n      throw new Error('Invalid AI response format')\n    }\n\n    if (!problemData.problem_text || typeof problemData.final_answer !== 'number') {\n      throw new Error('AI response missing required fields')\n    }\n\n    const { data: session, error: dbError } = await supabase\n      .from('math_problem_sessions')\n      .insert({\n        problem_text: problemData.problem_text,\n        final_answer: problemData.final_answer,\n      })\n      .select()\n      .single()\n\n    if (dbError) {\n      console.error('Database error:', dbError)\n      throw dbError\n    }\n\n    return NextResponse.json(session)\n  } catch (error: any) {\n    console.error('Error generating problem:', error)\n    return NextResponse.json(\n      { error: error.message || 'Failed to generate problem' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;AAIA,MAAM,QAAQ,yLAAuB,QAAQ,GAAG,CAAC,cAAc;AAE/D,MAAM,mBAAmB,CAAC;;;;;;;;;;;;;;;;;;;;;AAqB1B,CAAC;AAEM,eAAe;IACpB,IAAI;QACF,MAAM,QAAQ,MAAM,kBAAkB,CAAC;YAAE,OAAO;QAAmB;QAEnE,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;QAC3C,MAAM,WAAW,MAAM,OAAO,QAAQ;QACtC,MAAM,OAAO,SAAS,IAAI;QAE1B,IAAI;QACJ,IAAI;YACF,MAAM,cAAc,KAAK,OAAO,CAAC,sBAAsB,IAAI,IAAI;YAC/D,cAAc,KAAK,KAAK,CAAC;QAC3B,EAAE,OAAO,YAAY;YACnB,QAAQ,KAAK,CAAC,gCAAgC;YAC9C,MAAM,IAAI,MAAM;QAClB;QAEA,IAAI,CAAC,YAAY,YAAY,IAAI,OAAO,YAAY,YAAY,KAAK,UAAU;YAC7E,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,EAAE,MAAM,OAAO,EAAE,OAAO,OAAO,EAAE,GAAG,MAAM,kIAC7C,IAAI,CAAC,yBACL,MAAM,CAAC;YACN,cAAc,YAAY,YAAY;YACtC,cAAc,YAAY,YAAY;QACxC,GACC,MAAM,GACN,MAAM;QAET,IAAI,SAAS;YACX,QAAQ,KAAK,CAAC,mBAAmB;YACjC,MAAM;QACR;QAEA,OAAO,wLAAa,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,wLAAa,IAAI,CACtB;YAAE,OAAO,MAAM,OAAO,IAAI;QAA6B,GACvD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}